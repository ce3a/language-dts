'scopeName': 'source.dts'
'name': 'Devicetree Source'
'fileTypes': ['dts', 'dtsi']

patterns: [
  {
    include: '#nodes'
  }
  {
    include: '#labels'
  }
  {
    include: '#decnumbers'
  }
  {
    include: '#hexnumbers'
  }
  {
    include: '#arrays'
  }
  {
    include: '#hexbytes'
  }
  {
    include: '#strings'
  }
  {
    include: '#references'
  }
  {
    include: '#keywords'
  }
  {
    include: '#comments'
  }
  {
    include: '#directives'
  }
  {
    include: '#defines'
  }
]

repository:
  nodes:
    patterns: [
      {
        match: '([[:alpha:][:digit:]_-]+)(|@[0-9a-fA-F[:alpha:][:digit:],_-]+)([[:space:]]*{)'
        'captures':
          '1':
            'name': 'storage.type.dts'
          '2':
            'name': 'storage.type.dts'
        name: ''
      }
    ]
  labels:
    patterns: [
      {
        match: '\\w[[:alpha:][:digit:]_-]+:'
        name: 'entity.name.tag.dts'
      }
    ]
  decnumbers:
    patterns: [
      {
        match: '(?<![[:alpha:]]-)\\b[[:digit:]]+\\b'
        name: 'constant.numeric.integer.decimal.dts'
      }
    ]
  hexnumbers:
    patterns: [
      {
        match: '0x\\h+'
        name: 'constant.numeric.integer.hexadecimal.dts'
      }
    ]
  arrays:
    patterns: [
      {
        begin: '<'
        end: '>'
        name: ''
        patterns: [
          {
            match: '\\b[[:digit:]]+\\b'
            name: 'constant.numeric.integer.decimal.dts'
          }
          {
            match: '0x\\h+\\b'
            name: 'constant.numeric.integer.hexadecimal.dts'
          }
          {
            match: '\\w[[:alpha:][:digit:]_-]+:'
            name: 'entity.name.tag.dts'
          }
          {
            match: '(&[[:alpha:][:digit:]_-]+)|(&{.*})'
            name: 'constant.language.dts'
          }
          {
            match: '(?<!&)\\b[[:alpha:]_]+[[:alpha:][:digit:]_]+'
            name: 'entity.name.function.preprocessor.dts'
          }
          {
            begin: '//'
            end: '\\n'
            name: 'comment.line.double-slash.dts'
          }
          {
            begin: '/\\*'
            beginCaptures:
              '0':
                name: 'punctuation.definition.comment.begin.dts'
            end: '\\*/'
            endCaptures:
              '0':
                name: 'punctuation.definition.comment.end.dts'
            name: 'comment.block.scilab'
          }
        ]
      }
    ]
  hexbytes:
    patterns: [
      {
        begin: '\\['
        end: '\\]'
        name: ''
        patterns: [
          {
            match: '\\b\\h+\\b'
            name: 'constant.numeric.integer.hexadecimal.dts'
          }
          {
            match: '\\w[[:alpha:][:digit:]_-]+:'
            name: 'entity.name.tag.dts'
          }
          {
            match: '\\b[[:alpha:]_]+[[:alpha:][:digit:]_]+'
            name: 'entity.name.function.preprocessor.dts'
          }
          {
            begin: '/\\*'
            beginCaptures:
              '0':
                name: 'punctuation.definition.comment.begin.dts'
            end: '\\*/'
            endCaptures:
              '0':
                name: 'punctuation.definition.comment.end.dts'
            name: 'comment.block.scilab'
          }
        ]
      }
    ]
  strings:
    patterns: [
      {
        begin: '"'
        beginCaptures:
          '0':
            name: 'punctuation.definition.string.begin.dts'
        end: '"'
        endCaptures:
          '0':
            name: 'punctuation.definition.string.end.dts'
        name: 'string.quoted.double.dts'
      }
    ]
  references:
    patterns: [
      {
        match: '(&[[:alpha:][:digit:]_-]+)|(&{.*})'
        name: 'constant.language.dts'
      }
    ]
  keywords:
    patterns: [
      {
        match: '/[[:alpha:][:digit:]_-]+/'
        name: 'keyword.other.dts'
      }
    ]
  comments:
    patterns: [
      {
        begin: '//'
        end: '\\n'
        name: 'comment.line.double-slash.dts'
      }
      {
        begin: '/\\*'
        beginCaptures:
          '0':
            name: 'punctuation.definition.comment.begin.dts'
        end: '\\*/'
        endCaptures:
          '0':
            name: 'punctuation.definition.comment.end.dts'
        name: 'comment.block.scilab'
      }
    ]
  directives:
    patterns: [
      {
        match: '(#include)\\s*((["].*["])|([<].*[>])|)'
        'captures':
          '1':
            'name': 'keyword.control.directive.include.dts'
          '2':
            'name': 'string.quoted.double.dts'
      }
      {
        match: '(#define)(.*+)\\n'
        'captures':
          '1':
            'name': 'keyword.control.directive.define.dts'
      }
    ]
  defines:
    patterns: [
      {
        match: '(=[[:space:]]*+)([[:alpha:]_]+[[:alpha:][:digit:]_]+);'
        'captures':
          '2':
            'name': 'entity.name.function.preprocessor.dts'
      }
    ]
